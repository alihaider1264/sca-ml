class Solution:
    def solve(self, grid, visited, dp, m, n, i, j):
        if i == m-1 and j == n-1:
            return grid[i][j]
            
        D = L = R = U = int(1e9)
        
        if i-1 >= 0 and visited[i-1][j] == 0:
            visited[i-1][j] = 1
            U = self.solve(grid, visited, dp, m, n , i-1, j) + grid[i][j]
            visited[i-1][j] = 0
            
        if i+1 < m and visited[i+1][j] == 0:
            visited[i+1][j] = 1
            D = self.solve(grid, visited, dp, m, n , i+1, j) + grid[i][j]
            visited[i+1][j] = 0
        
        if j-1 >= 0 and visited[i][j-1] == 0:
            visited[i][j-1] = 1
            L = self.solve(grid, visited, dp, m, n , i, j-1) + grid[i][j]
            visited[i][j-1] = 0
        
        if j+1 < n and visited[i][j+1] == 0:
            visited[i][j+1] = 1
            R = self.solve(grid, visited, dp, m, n , i, j+1) + grid[i][j]
            visited[i][j+1] = 0
        
        return min(L, R, U, D)
        
    def minimumCostPath(self, grid):
        m = len(grid)
        n = len(grid[0])
        dp = [[-1 for i in range(n)] for j in range(m)]
        visited = [[0 for i in range(n)] for j in range(m)] 
        visited[0][0] = 1
        return self.solve(grid, visited, dp, m, n , 0, 0)
