from heapq import heapify,heappush,heappop
class Solution:
    
    #Function to return the minimum cost to react at bottom
    #right cell from top left cell.
    def minimumCostPath(self, grid):
        #Code here
        n = len(grid)
        heap = [(grid[0][0],0,0)]
        heapify(heap)
        visited = set((0,0))
        while heap:
            val,i,j = heappop(heap)
            if i == n-1 and j == n-1:
                return val
            if i<n-1 and (i+1,j) not in visited:
                heappush(heap,(val+grid[i+1][j],i+1,j))
                visited.add((i+1,j))
            if i>0 and (i-1,j) not in visited:
                heappush(heap,(val+grid[i-1][j],i-1,j))
                visited.add((i-1,j))
            if j<n-1 and (i,j+1) not in visited:
                heappush(heap,(val+grid[i][j+1],i,j+1))
                visited.add((i,j+1))
            if j>0 and (i,j-1) not in visited:
                heappush(heap,(val+grid[i][j-1],i,j-1))
                visited.add((i,j-1))
        return val
        ######### Not-Working #########
#         n = len(grid)
#         dp = [[0]*n for _ in range(n)]
#         dp[0][0] = grid[0][0]
#         for i in range(1,n):
#             dp[0][i] = dp[0][i-1] + grid[0][i]
#         for i in range(1,n):
#             dp[i][0] = dp[i-1][0] + grid[i][0]
# #         print(dp)
#         for i in range(1,n):
#             for j in range(1,n):
#                 dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + grid[i][j]
#         return dp[n-1][n-1]
