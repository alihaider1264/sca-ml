class Solution:
    def findMinCost(cost, M, N):
    
        # `T[i][j]` maintains the minimum cost to reach cell (i, j) from cell (0, 0)
        T = [[0 for x in range(N)] for y in range(M)]
    
        # fill the matrix in a bottom-up manner
        for i in range(M):
            for j in range(N):
                T[i][j] = cost[i][j]
    
                # fill the first row (there is only one way to reach any cell in the
                # first row from its adjacent left cell)
                if i == 0 and j > 0:
                    T[0][j] += T[0][j - 1]
    
                # fill the first column (there is only one way to reach any cell in
                # the first column from its adjacent top cell)
                elif j == 0 and i > 0:
                    T[i][0] += T[i - 1][0]
    
                # fill the rest with the matrix (there are two ways to reach any
                # cell in the rest of the matrix, from its adjacent
                # left cell or adjacent top cell)
                elif i > 0 and j > 0:
                    T[i][j] += min(T[i - 1][j], T[i][j - 1])
    
        # last cell of `T[][]` stores the minimum cost to reach destination cell
        # (M-1, N-1) from source cell (0, 0)
        return T[M - 1][N - 1]

    def mcost_dp(self, grid, m, n):
        # create a sum grid by picking the smallest values between up or left
        ans_grid = [[0]*n for __ in range(m)]

        ans_grid[0][0] = grid[0][0]
        # build first row
        for i in range(1, n):
            ans_grid[0][i] = ans_grid[0][i-1] + grid[0][i]

        # Now build first col
        for i in range(1, m):
            ans_grid[i][0] += ans_grid[i-1][0] + grid[i][0]

        # now start building out the rest of the table (start at 1, 1)
        for r in range(1, m):
            for c in range(1, n):
                v = min(ans_grid[r-1][c], ans_grid[r][c-1])
                ans_grid[r][c] = v + grid[r][c]

        return ans_grid[m-1][n-1]
    
    #Function to return the minimum cost to react at bottom
    #right cell from top left cell.
    def mcost(self, grid, start_row, start_col, end_row, end_col):
        if start_row > end_row or start_col > end_col:
            return 0
      
        if start_row == end_row and start_col == end_col:
            return grid[start_row][start_col]
            
        v1 = self.mcost(grid, start_row, start_col+1, end_row, end_col)
        v2 = self.mcost(grid, start_row+1, start_col, end_row, end_col)
        mval = min(v1, v2)

        print()        
        return grid[start_row][start_col] + mval
            
        
    def minimumCostPath(self, grid):
        #Code here
        n = len(grid)
        mcost = Solution.findMinCost(grid, n, n)
        return mcost
